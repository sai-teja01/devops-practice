import hashlib
import os
import flask

# This is an example file designed to trigger SonarCloud security warnings.
# DO NOT USE THIS CODE IN PRODUCTION.

app = flask.Flask(__name__)

# Vulnerability 1: Hardcoded Secret (Sonar rule: S2068)
# Secrets like API keys or database passwords should never be hardcoded.
# They should be loaded from environment variables or a secure vault.
API_KEY = "fl_live_abcdefghijklmnopqrstuvwxyz1234567890"
DB_PASSWORD = "my-super-secret-password-123!"


@app.route("/login", methods=['POST'])
def login():
    """
    A login function that demonstrates two major vulnerabilities.
    """
    username = flask.request.form.get("username")
    password = flask.request.form.get("password")

    # Vulnerability 2: Use of a weak cryptographic hash (Sonar rule: S2070)
    # MD5 is cryptographically broken and should not be used for hashing passwords.
    # Modern alternatives like bcrypt or Argon2 should be used.
    hashed_password = hashlib.md5(password.encode('utf-8')).hexdigest()

    # Imagine database logic here...
    print(f"User '{username}' tried to log in with hash: {hashed_password}")

    return "Login attempt processed."


@app.route("/ping")
def ping_host():
    """
    A network utility function that demonstrates a command injection vulnerability.
    """
    hostname = flask.request.args.get("host")

    # Vulnerability 3: Command Injection (Sonar rule: S2076)
    # Passing user-controlled input directly to a shell command is extremely dangerous.
    # An attacker can chain commands using ';' or '&&'.
    command = f"ping -c 1 {hostname}"
    os.system(command) # This line is the vulnerability

    return f"Pinged {hostname}."
